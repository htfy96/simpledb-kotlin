package simpledb.remote

import java.sql.*

/**
 * This class implements all of the methods of the Statement interface,
 * by throwing an exception for each one.
 * Subclasses (such as SimpleStatement) can override those methods that
 * it want to implement.
 * @author Edward Sciore
 */
abstract class StatementAdapter : Statement {
    @Throws(SQLException::class)
    override fun addBatch(sql: String) {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun cancel() {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun clearBatch() {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun clearWarnings() {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun close() {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun execute(sql: String): Boolean {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun execute(sql: String, autoGeneratedKeys: Int): Boolean {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun execute(sql: String, columnIndexes: IntArray): Boolean {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun execute(sql: String, columnNames: Array<String>): Boolean {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun executeBatch(): IntArray {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun executeQuery(sql: String): ResultSet {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun executeUpdate(sql: String): Int {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun executeUpdate(sql: String, autoGeneratedKeys: Int): Int {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun executeUpdate(sql: String, columnIndexes: IntArray): Int {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun executeUpdate(sql: String, columnNames: Array<String>): Int {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun getConnection(): Connection {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun getFetchDirection(): Int {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun getFetchSize(): Int {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun getGeneratedKeys(): ResultSet {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun getMaxFieldSize(): Int {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun getMaxRows(): Int {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun getMoreResults(): Boolean {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun getMoreResults(current: Int): Boolean {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun getQueryTimeout(): Int {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun getResultSet(): ResultSet {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun getResultSetConcurrency(): Int {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun getResultSetHoldability(): Int {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun getResultSetType(): Int {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun getUpdateCount(): Int {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun getWarnings(): SQLWarning {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun isClosed(): Boolean {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun isPoolable(): Boolean {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun setCursorName(name: String) {
        throw SQLException("operation not implemented")
    }

    override fun setEscapeProcessing(enable: Boolean) {}

    override fun setFetchDirection(direction: Int) {}

    @Throws(SQLException::class)
    override fun setFetchSize(rows: Int) {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun setMaxFieldSize(max: Int) {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun setMaxRows(max: Int) {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun setPoolable(poolable: Boolean) {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun setQueryTimeout(seconds: Int) {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun isWrapperFor(iface: Class<*>): Boolean {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun <T> unwrap(iface: Class<T>): T {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun closeOnCompletion() {
        throw SQLException("operation not implemented")
    }

    @Throws(SQLException::class)
    override fun isCloseOnCompletion(): Boolean {
        throw SQLException("operation not implemented")
    }
}